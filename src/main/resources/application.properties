quarkus.package.jar.type=uber-jar

{%- if values.enabledH2Database %}
##### H2 persistence #####
%dev.kogito.persistence.type=jdbc
%dev.quarkus.datasource.db-kind=h2
%dev.quarkus.datasource.jdbc.url=jdbc:h2:file:./db/database;AUTO_SERVER=true;DB_CLOSE_DELAY=-1
{% endif -%}

{%- if values.applicationPersistence=='Postgresql' %}
##### Postgres persistence #####
%prod.kogito.persistence.type=jdbc
%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.username=kogito-user
%prod.quarkus.datasource.password=kogito-pass
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/kogito
quarkus.flyway.migrate-at-start=true
{% endif -%}

{%- if values.applicationPersistence=='Kafka' %}
##### Kafka persistence #####
%prod.kogito.persistence.type=jdbc
# Konfig for Kafka goes here 
%prod.kogito.persistence.type=kafka
%prod.kafka.bootstrap.servers=localhost:9092
quarkus.kafka-streams.application-id=kogito-persistence-example
quarkus.flyway.migrate-at-start=true
{% endif -%}

{%- if values.enabledMessaging %}
##### Kafka Messaging ##### 
# example from : https://blog.kie.org/2021/09/kogito-process-eventing-add-ons.html
# mp.messaging.[incoming|outgoing].<channel name>.connector = <connector name>
# mp.messaging.[incoming|outgoing].<channel name>.topic = <topic name>
# Example:
# mp.messaging.incoming.kogito_incoming_stream.connector=smallrye-kafka
# mp.messaging.incoming.kogito_incoming_stream.topic=travellers
# mp.messaging.incoming.kogito_incoming_stream.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
# mp.messaging.outgoing.kogito_outgoing_stream.connector=smallrye-kafka
# mp.messaging.outgoing.kogito_outgoing_stream.topic=processedtravellers
# mp.messaging.outgoing.kogito_outgoing_stream.value.serializer=org.apache.kafka.common.serialization.StringSerializer
{% endif -%}

{%- if values.enabledLokObs %}
##### Lokal Observerbarhet #####
%dev.quarkus.micrometer.export.otlp.enabled=false

# Insamling av egna metrics
%prod.quarkus.otel.metrics.enabled=true
%prod.quarkus.otel.metric.export.interval=10s
%prod.quarkus.otel.exporter.otlp.protocol=http/protobuf
%prod.quarkus.otel.exporter.otlp.metrics.endpoint=http://LokObs-DEPLOYMENTNAME-alloy:4318/v1/metrics

# Quarkus OTEL stodjer inte automatisk instrumentering av metrics.
# Darfor inkluderas denna micrometer-extension.
# https://docs.quarkiverse.io/quarkus-micrometer-registry/dev/micrometer-registry-otlp.html
%prod.quarkus.micrometer.export.otlp.enabled=true
%prod.quarkus.micrometer.export.otlp.url=http://LokObs-DEPLOYMENTNAME-alloy:4318/v1/metrics
%prod.quarkus.micrometer.export.otlp.resourceAttributes=service.name=${{values.applicationName}},service.type=quarkus

# Traces
%prod.quarkus.otel.traces.enabled=true
%prod.quarkus.otel.exporter.otlp.traces.endpoint=http://LokObs-DEPLOYMENTNAME-alloy:4318
{% endif -%}